{"version":3,"file":"js/about.79d76c99.js","mappings":"sOACOA,GAAG,e,y9KACRC,G,kCADAC,EAAAA,EAAAA,IA4QI,MA5QJ,EA4QIC,G,YC5QN,MAAMC,EAAS,GAKTC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE","sources":["webpack://vue_tutorial/./src/views/AboutView.vue","webpack://vue_tutorial/./src/views/AboutView.vue?d56f"],"sourcesContent":["<template>\n  <div id=\"about_total\">\n  <article>\n    <h1>overview</h1>\n    <p>\n      JSM is an mind-map editor,\n    </p>\n    <p>\n      Futhermore, it's a data-pipeline developing environment(based on Python3).\n    </p>\n    <p>\n      The server will create an python backend to execute code and save the data.\n    </p>\n  </article>\n  <article>\n    <h1>data-pipeline</h1>\n    <p>\n      Pipeline is consist of nodes and pipes\n    </p>\n    <h3>pipe</h3>\n    <p>\n      pipes defines who's the parent and who's the child.\n\n    </p>\n    <p>\n      when pipes link two nodes together. the one on the left is parent, and the one on the right is child\n    </p>\n    <h3>node</h3>\n    <p>\n      Node receives data from its parent, and execute some code, then produce the target data and pass it to its children\n    </p>\n    <p>\n      there is a special node called 'root' node, it is the only node that don't have a parent, and cannot be removed\n    </p>\n    <p>\n      only root node receives the source data, the others receives data from parent.\n    </p>\n    <p>\n      after running the pipeline, the data of all nodes will be recorded and shown in the result block \n    </p>\n  </article>\n  \n  <article>\n    <h1>get started</h1>\n    <p>\n      Just do 3 things, you can start the pipeline:\n    </p>\n    <p>      \t\n      1.give source data; 2.edit the pipeline; 3.click the 'run' button;\n    </p>\t\n    <p>      \n      you can do the editing, executing, debugging in the same window.\n    </p>\n    <p>\n      and there are planty of shortcuts and navigator, that make the coding and debugging quite convience.\n    </p>\n    <h3>editing pipeline</h3>\n    <p>\n      click on any node then press ESC, you may find that editing is prevented, and the block turn red. that means you enter function mode.\n    </p>\n    <p>\n      under function mode all the input turn into functional.\n    </p>\n    <p>\n      press a: create a child node\n    </p>\n    <p>\n      press s: create a surfix node\n    </p>\n    <p>\n      press ctrl+up: move up\n    </p>\n    <p>\n      press ctrl+down: move down etc...\n    </p>\n    <p>\n      you can find the all the functional in <a>shortcut list</a>\n    </p>\n    <p>\n      when press space, you can exit function mode and start editing.\n    </p>\n    <h3>editing node</h3>\n    <p>\n      you can editing the code like python editor\n    </p>\n    <p>\n      there are 6 type of node:raw, as, copy, iter, null, off,\n      the nodetype was typed on the first line of the block\n    </p>\n    <p>\n      first you need to know about raw, just bare in mind a few things:\n    </p>\n    <p>\n      1. the basic task of a node is to produce the data\n      2. $f(f short for from) is the data from parent(for root node, $f is the source data)\n      3. $t is your target\n    </p>\n    <h3>here are some node examples:</h3>\n    <p>\n      example1: give what receive from the parent\n    </p>\n    <div>\n      <textarea cols=\"30\">\n\traw\n\t$t=$f\n      </textarea>\n    </div>      \n    <p>\n      example2: receive n and pass n+1\n    </p>\n    <div>    \n    <textarea cols=\"30\">\n      raw\n      $t=$f+1\n    </textarea>\n    </div>    \n    <p>\n      example3: receive a list and pass the first element of a list\n    </p>\n    <div>    \n    <textarea cols=\"30\">\n      raw\n      $t=$f[0]\n    </textarea>\n    </div>    \n    <p>\n      example4: no matter what the node receive, just pass 1\n    </p>\n    <div>\n    <textarea cols=\"30\">\n      raw\n      $t=1;\n    </textarea>\n    </div>    \n    <p>\n      example5: very simple pipeline;node1 returns3;node2 returns4;node3 returns6;\n    </p>\n    <div>\n      <img alt=\"Vue logo\" src=\"../assets/pipeline_example1.png\">\n    </div>      \n    <h3>more types: 'as' and 'copy'</h3>\n    <p>'as' and 'copy' make very tiny difference from 'raw'\n    </p>\n    <p>in 'as' type, you just give a expression, then it will automaticly pass it to $t.\n    </p>\n    <p>example for 'as':</p>\n    <div>    \n    <textarea cols=\"30\">\n      as\n      $f+1\n    </textarea>\n    </div>    \n    <p>\n      is the same as \n    </p>\n    <div>\n    <textarea cols=\"30\">\n      raw\n      $t=$f+1\n    </textarea>\n    </div>    \n    <p>in 'copy' type, you just give make some change to $f and, then it will automaticly pass $f to $t.\n    </p>\n    <p>Important the change on $t will also change the parent data, if the data's type is not simple type. and that's very useful.\n    </p>\n    <p>example for 'copy':</p>\n    <div>    \n    <textarea cols=\"30\">\n      copy\n      $f['a']=1\n    </textarea>\n    </div>    \n    <p>\n      is the same as \n    </p>\n    <div>    \n    <textarea cols=\"30\">\n      raw\n      $f['a']=1\n      $t=$f\n    </textarea>\n    </div>    \n    <h3>Global var: $g</h3>\n    <p>In ordinary situation, in a node's view, the only information you know is the data that received from parent</p>    \n    <p>But under some complecated circumstance, you may want to pass information from one node to another that is not under relationship of child and parent</p>\n    <p>To deal with these problems. We have $g as global inventory, every nodes can see $g</p>\n    <p>you can use $g.helloWorld=\"Hello World\" in one node</p>\n    <p>and receive \"Hello World\" with $g.helloWorld in any other node that is executed after that</p>\n\n    <h3>'null' type</h3>\n    <p>just execute code but don't pass data to the child</p>\n    <p>that means all its children and descendant won't receive data and give no output</p>\n\n    <h3>'off' type</h3>\n    <p>like null but do not execute code and do not pass data either</p>\n\n    <h3>'iter' type</h3>\n    <p>coming soon </p>\n  </article>\n  <article>\n    <h1>Button</h1>\n    <p>\n      run: run the pipeline\n    </p>\n    <p>\n      clear: clear the pipeline\n    </p>\n    <p>\n      revert: when you leave the page, and with web-session still on, you can reload the page and recover the tree.\n    </p>\n  </article>\n  <article>\n    <h1>shortcut</h1>\n    <h3>Under function mode</h3>\n    <p>\n      a:add node\n    </p>      \n    <p>\n      s:add surfix node\n    </p>      \n    <p>\n      tab: fold or unfold node\n    </p>      \n    <p>\n      d or delete:delete node\n    </p>      \n    <p>\n      c: copy node\n    </p>      \n    <p>\n      p: paste node (with all children and surfix)\n    </p>      \n    <p>\n      g: goto result\n    </p>      \n    <p>\n      t: get into context of this node\n    </p>      \n    <p>\n      Ctrl+up: move up\n    </p>      \n    <p>\n      Ctrl+down: move down      \n    </p>\n  </article>\n  <article>\n    <h1>code editor</h1>\n    <p>\n      $fd: fromdataDict\n    </p>\n    <p>\n      $td: todataDict\n    </p>\n    <p>\n      $f: fromdata\n    </p>\n    <p>\n      $t: todata\n    </p>\n    <p>\n      $n: temp node under context\n    </p>\n    <p>\n      $nd: nodeDict\n    </p>\n    <p>\n      $g: global inventory\n    </p>\n  </article>\n</div>  \n</template>\n<style>\n  #about_total {\n  padding-left:50px;\n  padding-right:50px;  \n  }\n  #about_total p {\n  text-align:left;\n  }\n  #about_total h1 {\n  text-align:left;\n  }\n  #about_total h2 {\n  text-align:left;\n  }\n  #about_total h3 {\n  text-align:left;\n  }\n  #about_total div{\n      overflow:auto;\n  }\n  #about_total textarea {\n  float:left;\n  }\n  #about_total img {\n  float:left;\n  }\n  \n</style>  \n","import { render } from \"./AboutView.vue?vue&type=template&id=44e8e8a6\"\nconst script = {}\n\nimport \"./AboutView.vue?vue&type=style&index=0&id=44e8e8a6&lang=css\"\n\nimport exportComponent from \"/home/lsy/vue_tutorial/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["id","_hoisted_2","_createElementBlock","_hoisted_8","script","__exports__","render"],"sourceRoot":""}