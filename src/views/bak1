

<template>
  
<span class="dot"></span>

<div id='jsm_outer' style='height:800px;width:1000px;border-style:solid'>
  <div id='jsm_inner' style="overflow: auto;position: relative;width: 100%;height: 100%;">
    <canvas id='jsm_canvas' style='position:absolute' z-index='1' />    
<template  v-for='(node, idx) in info' :key="idx">
  <textarea
    style='z-index:auto;text-overflow:ellipsis;outline:none'
    @input='OnInput($event)'
    @focus='OnFocus($event)'
    @blur='OnBlur($event)'
    @keydown='OnKeydown($event)'
    :id='idx'
    :class="{'readonly': ActiveNodeIs(idx)}">{{node.v}}
  </textarea>
  <span class='dot'
	@click='OnClickExpander($event)'        
	:id="'e_'+idx"></span>
</template>
  </div>
</div>
<div id='saver' style='position:absolute;margin-top:2px'>
  <input/>
  <button>save</button>
</div>

</template>

<script>
// node_element.clientHeight;
//      ³¤¿í:
//      w[n] ±íÊ¾ÐÎ×´nµÄ¿í
//      h[n] ±íÊ¾ÐÎ×´nµÄ³¤
//      ÌØÊâ: h4 ±íÊ¾ÔÚÐÖµÜÐÎ×´ÖÐµÄÏà¶Ô¸ß¶È
//
//      ---------------------------------
//      |3            -------           | 
//      | ---------   |2    |           | 
//      | |1      |   |     | --------- | 
//      | |       |   |     | |4      | | 	  	  
//      | |       |   |     | |       | | 
//      | |       |   |     | |       | | 
//      | |       |   |     | |       | | 
//      | |       |   |     | |       | | 	  	  
//      | |       |   |     | --------- | 	  	  
//      | ---------   |     |           | 	  	  
//      |             -------          	|  
//      ---------------------------------
//      
//      Î»ÖÃ:
//      (xy)[(nx)_(ny)] ±íÊ¾Ïà¶ÔÎ»ÖÃ
//    X:6*1***0***2 * 4**3**5**9***1***1*7
//                                 0   1
//  Y 
//  5   ----------------------------------
//  3   |             -------            |  
//  1   | ---------   |*****|            |  
//  7   | |*******|   |*****|  --------- |
//      | |*******|   |*****|  |*******| |     
//      | |*******|   |*****|  |*******| |        
//  0   | |*******|   |*****|  |*******| |        
//      | |*******|   |*****|  |*******| |        
//      | |*******|   |*****|  |*******| |      	  	
//  8   | |*******|   |*****|  --------- |      	  	
//  2   | ---------   |*****|            |	  	  
//  4   |             -------            |	  
//  6   ----------------------------------

var $d = document;  
var $g = function (id) { return $d.getElementById(id); };
var $ge = function (id) { return $d.getElementById('e_'+id); };
var $c = console.log;

var opts={
    height:800,
    width:1000,
    hmargin:100,
    vmargin:50,
    hspace:30,
    vspace:20,
    expandsize:14,
    node:{
	v:'topic',
	show:1,
	sur:0
    }
};


export default {
    data () {
	return {
	    info:{
		'root':structuredClone(opts.node),
		'c_0':structuredClone(opts.node)
	    },
	    struct: {
		'root': ['c_0'],
		'c_0': [],	
	    },
	    cNO: 1,
	    
	    offset_x:200,
	    offset_y:200,
	    width:opts.width,
	    height:opts.height,
	    isalive:1,
	    active_node:0,
	}
    },
    
    watch: {
	// struct(){
	//     this.GetParent()
	// },
	// deep:true
    },
    mounted() {
	this.WatchThis();
	this.SetThis();
	$g('jsm_canvas').style.left='0px'
	$g('jsm_canvas').style.right='0px'
	
	pxy=this;
	
    },
    updated() {
	if (this.isalive==1){
  	    this.SetThis();	    
	}
    },
    
    methods: {
	ActiveNodeIs(i){
	    if (i==this.active_node){
		return true
	    }else{
		return false
	    }
	},
	ActiveIs(i){
	    if (this.active_node!=0){
		return true
	    }else{
		return false
	    }
	},
	ActiveOn(i){
	    $g(i).focus()
	    this.active_node=i
	},
	ActiveOff(){
	    this.active_node=0
	},
	// 1.get
	GetChildren(i){
	    if (i in this.struct){
		return this.struct[i]
	    }else{
		return []
	    }
	},
	GetDescendant(i){
	    var des=this.struct[i];
	    for (let i in des){
		des=des.concat(this.GetDescendant(des[i]))
	    }
	    return des	    
	},
	Get(i){
	    return this.info[i]
	},
	GetNewnodeName(){
	    var name='c_'+this.cNO;
	    this.cNO++;
	    return name
	},
	
	
	// 2.watch
	WatchThis(){
	    this.WatchParent();
	    //this.WatchStruct();
	    this.WatchShow();
	    this.WatchExpander();
	},
	WatchParent(){
	    var d=new Object();
	    for (let i in this.struct){
		for (let j in this.struct[i]){
		    d[this.struct[i][j]]=i
		}
	    }
	    this.parent=d;
	    
	    var d1=new Object();
	    for (let i in this.info){
		var n=this.info[i]
		if (n.sur != 0){
		    d1[n.sur]=i
		}
	    }
	    this.front=d1;
	},
	WatchShowAdd(i){
	    this.isshow[i]=1;
	    if (this.Get(i).show==1){
		for (let j in this.struct[i]){
		    this.WatchShowAdd(this.struct[i][j]);
		}
		var sur=this.Get(i).sur
		if (sur != 0){
		    this.WatchShowAdd(sur);
		}
	    }
	},
	WatchShow(){
	    var s=new Object();
	    for (let i in this.info){
		s[i]=0
	    }
	    this.isshow=s;
	    this.WatchShowAdd('root');
	},
	WatchExpander(){
	    var s=new Object();
	    var s1=new Object();	    
	    for (let i in this.info){
		s[i]=0
		s1[i]=0				
		if ((this.isshow[i]==1) &&
		    ((this.struct[i].length>0) ||
		     (this.Get(i).sur!=0))
		   ){
		    s1[i]=1
		    if (this.Get(i).show==1){
			s[i]=1
		    }		
		}
	    }
	    this.isexpander=s1;
	    this.isshowchildren=s;	    
	},
	
	AddNode(i){
	    var name=this.GetNewnodeName();
	    this.struct[i].push(name);
	    this.struct[name]=[];
	    this.info[name]=structuredClone(opts.node)
	    this.WatchThis();
	    return name
	    //this.SetThis();
	},
	
	AddSurNode(i){
	    var name=this.GetNewnodeName();
	    var n=this.Get(i);
	    if (n.sur!=0){
		throw new Error(`node already have sur`);
	    }
	    n.sur=name
	    this.struct[name]=[];
	    this.info[name]=structuredClone(opts.node)
	    this.WatchThis();
	    //this.SetThis();
	},
	
	DropNode(i){
	    this.isalive=0
	    var desc=this.GetDescendant(i);
	    desc=desc.concat([i])
	    for (let j in desc){
		delete(this.info[desc[j]])
		delete(this.struct[desc[j]])
	    }
	    for (let j in desc){
		var n=desc[j];
		var p=this.parent[n]
		$c(n)
		$c(p)		
		if (p in this.struct){
		    var l=this.struct[p];
		    var filtered=l.filter((value, index, arr) => {
			return value != n
		    });
		    this.struct[p]=filtered
		}
	    }
	    this.isalive=1	    
	    this.WatchThis();
	    this.SetThis();
	},
	HideNode(i){
	    this.Get(i).show=0;
	    this.WatchThis();
	    this.SetThis();
	},
	ShowNode(i){
	    this.Get(i).show=1;
	    this.WatchThis();
	    this.SetThis();
	},
	ToggleNode(i){
	    this.Get(i).show=1-this.Get(i).show
	    this.WatchThis();
	    this.SetThis();
	},
	
	// 4.set
	SetCoordinate(){
	    var r=this.Get('root');
	    this.offset_x=r.x0-r.x6+opts.hmargin;
	    this.offset_y=r.y0-r.y5+opts.vmargin;
	    
	    for (let i in this.info){
		if (this.isshow[i]==0){
		    $g(i).style.position = 'absolute'		    
		    $g(i).style.visibility = 'hidden';
		}else{
		    var n=this.Get(i);
		    $g(i).style.position = 'absolute'
		    $g(i).style.visibility = 'visible';
		    $g(i).style.left = (n.x1+this.offset_x)+"px"
		    $g(i).style.top = (n.y1+this.offset_y)+"px"
		    
		}
		
		if (this.isexpander[i]==0){
		    $ge(i).style.position = 'absolute'		    		    
		    $ge(i).style.visibility = 'hidden';
		}else{
		    var n=this.Get(i);		    
		    $ge(i).style.position = 'absolute'
		    $ge(i).style.visibility = 'visible';
		    $ge(i).style.left = (n.x2+this.offset_x)+"px"
		    $ge(i).style.top = (n.y0-opts.expandsize/2+this.offset_y)+"px"
		    $ge(i).style.height = opts.expandsize+"px"
		    $ge(i).style.width = opts.expandsize+"px"
		    
		}
	    }
	    
	},
	
	SetSize(i){
	    this.info[i].w1=$g(i).offsetWidth;
	    this.info[i].h1=$g(i).offsetHeight;
	},
	
	SetLine(x1,y1,x2,y2,dash=false){
	    var ctx=$g('jsm_canvas').getContext('2d');		    
	    ctx.beginPath();
	    x1=x1+this.offset_x
	    x2=x2+this.offset_x	    
	    y1=y1+this.offset_y
	    y2=y2+this.offset_y
	    
	    if (dash==true){
		ctx.setLineDash([0.5,1]);
	    }
	    ctx.moveTo(x1,y1)
	    ctx.lineTo((x1+x2)/2,y1)
	    ctx.lineTo((x1+x2)/2,y2)
	    ctx.lineTo(x2,y2)	    	    
	    ctx.stroke();
	    
	},
	
	SetCanvasClear(){
	    var ctx=$g('jsm_canvas').getContext('2d');
	    ctx.clearRect(0,0,this.width,this.height)
	},
	SetCanvas(){
	    this.Get('root').h3
	    var w=this.Get('root').w3+2*opts.hmargin;
	    var h=this.Get('root').h3+2*opts.vmargin;
	    w=Math.max(this.width,w);
	    h=Math.max(this.height,h);
	    this.width=w;
	    this.height=h;
	    $g('jsm_canvas').height=h
	    $g('jsm_canvas').width=w
	    this.SetCanvasClear();
	    for (let i in this.info){
		if (this.isshowchildren[i]){
		    for (let j in this.struct[i]){
			var o1=this.Get(i);
			var o2=this.Get(this.struct[i][j]);
			var x1=o1.x2+opts.expandsize
			var y1=o1.y0
			var x2=o2.x6
			var y2=o2.y0
			this.SetLine(x1,y1,x2,y2);
		    }
		    
		}
		
		if ((i in this.front) && (this.isshow[i]==1)){
		    var p=this.Get(this.front[i])
		    var x1=p.x5+10
		    var y1=p.y3
		    var x2=p.x9
		    var y2=p.y0
		    this.SetLine(x1,y1,x2,y2,true)
		    
		    var x1=p.x5+10
		    var y1=p.y4
		    var x2=p.x9
		    var y2=p.y0
		    this.SetLine(x1,y1,x2,y2,true)
		    
		}
		
	    }
	    
	    
	    //$g('jsm_canvas').style.z-index=1
	    //$g('jsm_inner').scrollHeight=h+'px'
	    //$g('jsm_inner').scrollWidth=w+'px'	    
	    
	    
	    //todo
	},
	
	SetLayout(i){
	    this.SetSize(i);
	    var n=this.Get(i)	    
	    var c=this.GetChildren(i);
	    if ((c.length==0) || (n.show==0)){
		n.w2=0;
		n.h2=0;
		n.w2_add=0
	    }else{
		var w2=0;
		var h2=0;
		for (let j in c){
		    this.SetLayout(c[j]);
		    this.Get(c[j]).h4=h2;
		    w2=Math.max(w2,this.Get(c[j]).w3);
		    h2=h2+this.Get(c[j]).h3+opts.vspace;
		}
		h2=h2-opts.vspace;
		n.w2=w2
		n.h2=h2
		n.w2_add=w2+opts.hspace
	    }
	    
	    if ((n.sur==0) || (n.show==0)){
		n.h4=0;
		n.w4=0;
		n.w4_add=0;
	    }else{
		this.SetLayout(n.sur);
		var sur=this.Get(n.sur)
		n.w4=sur.w3;
		n.h4=sur.h3;
		n.w4_add=n.w4+opts.hspace
	    }
	    n.w3=n.w1+n.w2_add+n.w4_add
	    n.h3=Math.max(n.h1,n.h2,n.h4)		
	},
	
	SetPositionX(i,x){
	    var n=this.Get(i);
	    n.x0=x;
	    n.x1=n.x0-n.w1/2
	    n.x2=n.x0+n.w1/2
	    
	    n.x4=n.x2+opts.hspace
	    n.x3=n.x4+n.w2/2
	    n.x5=n.x4+n.w2
	    
	    if (n.sur!=0){
		n.x9=n.x5+opts.hspace
		n.x11=n.x9+n.w4		
		n.x10=n.x9+n.w4/2
		n.x6=n.x1		
		n.x7=n.x11
	    }else{
		n.x6=n.x1
		n.x7=n.x5
	    }
	    
	},
	SetPositionY(i,y){
	    var n=this.Get(i);	      
	    n.y0=y;
	    n.y1=n.y0-n.h1/2
	    n.y2=n.y0+n.h1/2
	    n.y3=n.y0-n.h2/2
	    n.y4=n.y0+n.h2/2
	    n.y5=n.y0-n.h3/2
	    n.y6=n.y0+n.h3/2
	    n.y7=n.y0-n.h4/2
	    n.y8=n.y0+n.h4/2
	    
	},
	SetPosition(i){
	    var n=this.Get(i);
	    
	    if (i=='root'){
		this.SetPositionX(i,0)
		this.SetPositionY(i,0)		  
	    }else if(i in this.front){
		$c(i)
		var p=this.Get(this.front[i]);
		var x=p.x9+n.w1/2
		var y=p.y0
		this.SetPositionX(i,x)
		this.SetPositionY(i,y)
	    }else{
		var p=this.Get(this.parent[i]);
		var x=p.x4+n.w1/2
		var y=p.y3+n.h4+n.h3/2
		this.SetPositionX(i,x)
		this.SetPositionY(i,y)
	    }
	    
	    var c=this.GetChildren(i);
	    for (let j in c){
		this.SetPosition(c[j])
	    }
	    if (n.sur!=0){
		this.SetPosition(n.sur)
	    }
            //node_element.style.left = (_offset.x + p.x) + 'px';
            //node_element.style.top = (_offset.y + p.y) + 'px';
	    
	},
	SetThis(){
	    this.SetLayout('root');
	    this.SetPosition('root');	
	    this.SetCoordinate();
	    this.SetCanvas();	      
	    $c(this.info);  
	},
	
	
	// 5.on
	OnInput(event){
	    var target=event.target;
	    var id=target.id
	    target.style.height = "auto";
	    target.style.height = (target.scrollHeight) + "px";
	    //this.info[target.id].height=target.offsetHeight;
	    //this.info[target.id].width=target.offsetWidth;	
	    //$c(this.info);
	    //$c(typeof(this.info));
	    this.SetThis()
	},
	OnFocus(event){
	    var target=event.target;
	    var id=target.id
	    target.style.height = "auto";
	    target.style.height = (target.scrollHeight) + "px";
	    
	    //this.info[target.id].height=target.offsetHeight;
	    //this.info[target.id].width=target.offsetWidth;	
	    //$c(this.info);
	    //$c(typeof(this.info));
	    this.SetThis();
	    pxy.active_node=id;	    
	},
	OnBlur(event){
	    var target=event.target;
	    var id=target.id
	    target.style.height = "auto";
	    target.style.height = (target.scrollHeight) + "px";
	    //this.info[target.id].height=target.offsetHeight;
	    //this.info[target.id].width=target.offsetWidth;	
	    //$c(this.info);
	    //$c(typeof(this.info));
	    this.SetThis();
	    pxy.active_node=0;	    
	},
	OnClickExpander(event){
	    var target=event.target;
	    var eid=target.id
	    $c('gg');
	    $c(eid);
	    var id=eid.substring(2)
	    this.ToggleNode(id)
	    
	},
	OnKeydown(event){
	    var target=event.target;
	    var id=target.id
	    var k=event.keyCode
	    if (k == 27){
		event.preventDefault();
		this.ActiveOn(id)
	    }else if (this.active_node==id){

		this.OnkeydownActiveMode(event)

	    }else{
		
	    }
	},
	OnkeydownActiveMode(event){
	    var target=event.target;
	    var id=target.id
	    var k=event.keyCode
	    event.preventDefault();	    
	    switch(k){
	    case 32:
		this.ActiveOff()
		break;
	    case 65:
		var nodeid=this.AddNode(id);
		this.ActiveOn(nodeid);
		break;
	    }

	},
	
	
    }
}
</script>

<style>
.dot {
    background-color: #bbb;
    border-radius: 50%;
    display: inline-block;
}  
</style>
